// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.0;

contract GradeBook {
    // Define the Grade struct
    struct Grade {
        string studentName;
        string subject;
        uint256 grade;
    }

    // Array to store Grade instances
    Grade[] public grades;

    // Owner of the contract (instructor)
    address public owner;

    // Modifier to restrict access to only the contract owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    // Constructor to initialize the contract owner
    constructor() {
        owner = msg.sender;
    }

    // Function to add a new grade entry
    function addGrade(string memory _studentName, string memory _subject, uint256 _grade) public onlyOwner {
        Grade memory newGrade = Grade(_studentName, _subject, _grade);
        grades.push(newGrade);
    }

    // Function to update the grade of a student for a specific subject
    function updateGrade(string memory _studentName, string memory _subject, uint256 _newGrade) public onlyOwner {
        for (uint256 i = 0; i < grades.length; i++) {
            if (keccak256(abi.encodePacked(grades[i].studentName)) == keccak256(abi.encodePacked(_studentName)) &&
                keccak256(abi.encodePacked(grades[i].subject)) == keccak256(abi.encodePacked(_subject))) {
                grades[i].grade = _newGrade;
                break;
            }
        }
    }

    // Function to retrieve the grade of a student for a particular subject
    function getGrade(string memory _studentName, string memory _subject) public view returns (uint256) {
        for (uint256 i = 0; i < grades.length; i++) {
            if (keccak256(abi.encodePacked(grades[i].studentName)) == keccak256(abi.encodePacked(_studentName)) &&
                keccak256(abi.encodePacked(grades[i].subject)) == keccak256(abi.encodePacked(_subject))) {
                return grades[i].grade;
            }
        }
        return 0; // Return 0 if no grade found
    }

    // Function to calculate and return the average grade of all students for a specific subject
    function averageGrade(string memory _subject) public view returns (uint256) {
        uint256 sum = 0;
        uint256 count = 0;
        for (uint256 i = 0; i < grades.length; i++) {
            if (keccak256(abi.encodePacked(grades[i].subject)) == keccak256(abi.encodePacked(_subject))) {
                sum += grades[i].grade;
                count++;
            }
        }
        if (count == 0) {
            return 0; // Return 0 if no grades found for the subject
        }
        return sum / count;
    }
}